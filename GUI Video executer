# Import required libraries
from pytube import YouTube
import tkinter as tk
from tkinter import messagebox
import vlc
import threading
import os

# Function to download video
def download_video(url, on_complete):
    try:
        yt = YouTube(url)
        video = yt.streams.get_highest_resolution()
        # The `download` method returns the file path of the downloaded video
        file_path = video.download()
        on_complete(file_path)  # Pass the file path to the callback
    except Exception as e:
        on_complete(None, str(e))

# Main application class
class YouTubeDownloaderApp:
    def __init__(self, root):
        self.root = root
        self.root.title('YouTube Video Downloader and Player')

        # Input field for URL
        self.url_label = tk.Label(root, text="Enter YouTube URL:")
        self.url_label.pack()
        self.url_entry = tk.Entry(root, width=50)
        self.url_entry.pack()

        # Download button
        self.download_button = tk.Button(root, text="Download and Play", command=self.start_download_thread)
        self.download_button.pack()

        # Progress label
        self.progress_label = tk.Label(root, text="")
        self.progress_label.pack()

        # Player frame
        self.vlc_instance = vlc.Instance()
        self.player = self.vlc_instance.media_player_new()
        self.player_frame = tk.Frame(root, bg='black')
        self.player_frame.pack(fill=tk.BOTH, expand=1)

        # Embed VLC player
        self.embed_info = self.player_frame.winfo_id()  # The frame ID for embedding VLC player

    def start_download_thread(self):
        url = self.url_entry.get()
        if not url.strip():
            messagebox.showerror('Error', 'Please enter a valid YouTube URL')
            return
        self.progress_label['text'] = 'Downloading...'
        # Start download in a separate thread to avoid freezing the GUI
        threading.Thread(target=download_video, args=(url, self.on_download_complete)).start()

    def on_download_complete(self, file_path, error=None):
        if file_path:
            self.root.after(0, self.play_video, file_path)
        elif error:
            self.root.after(0, messagebox.showerror, "Error", error)
        self.progress_label['text'] = ''

    def play_video(self, file_path):
        if os.path.exists(file_path):
            media = self.vlc_instance.media_new(file_path)
            media.get_mrl()
            self.player.set_media(media)
            self.player.set_hwnd(self.embed_info)  # Embed VLC player into GUI
            self.player.play()
            self.progress_label['text'] = 'Playing...'
        else:
            messagebox.showerror('Error', 'Video file not found.')

# Run the application
if __name__ == "__main__":
    root = tk.Tk()
    app = YouTubeDownloaderApp(root)
    root.mainloop()
